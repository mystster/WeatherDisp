# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: (Push)build and publish image to Functions

on:
  push:
    branches: [ master]
    paths:
    - 'Azure/Functions/**'
    - 'Azure/Vue/**'
    - '.github/**/*.yml'

env:
  node-version: 13.10.1
  dotnet: 3.1.100
  registry: ghcr.io
  image: weatherdisp
  functionsApp: WeatherInfo

jobs:
  Prepare:
    name: Prepare environment variable
    runs-on: ubuntu-latest
    outputs:
      BRANCH: ${{steps.run.outputs.safeBranch}}
      TAG_NAME: ${{steps.run.outputs.safeBranch}}-${{steps.run.outputs.stag}}
    env:
      REF: ${{github.ref}}
      STAG: ${{github.sha}}
    steps:
      - id: run
        run: |
          DATA=${REF##*/}
          echo "::set-output name=safeBranch::`echo $DATA | sed -E 's/[^a-zA-Z0-9\-]/\-/g'`"
          echo "::set-output name=stag::${STAG::7}"
  Check:
    name: Check this commit is merged commit
    runs-on: ubuntu-latest
    outputs:
      IS_MERGED_COMMIT: ${{steps.mergedCommitsSha.outputs.result}}
      SLOT_NAME: ${{steps.mergedCommitsSha.outputs.pr_number}}-${{steps.mergedCommitsSha.outputs.head_ref}}
    steps: 
      - name: merge commit information
        id: mergedCommitsSha
        uses: actions/github-script@v2
        with:
          previews: groot
          debug: true
          script: |
            const info = await github.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha
            });
            console.dir(info);
            const pr = info.data.find(d => d.merge_commit_sha === context.sha);
            if(pr){
              console.dir(pr);
              console.dir(pr.head);
              core.setOutput("head_ref", pr.head.ref.split('/').pop().replace(/[^a-zA-Z0-9]/g, '-'));
              core.setOutput("pr_number", pr.number);
              return true;
            }
            return false;
      - name: dump
        run: |
          echo ${{steps.mergedCommitsSha.outputs.result}}
          echo ${{steps.mergedCommitsSha.outputs.head_ref}}
          echo ${{steps.mergedCommitsSha.outputs.pr_number}}
  Swap_slot:
    name: Swap deploymet slot
    runs-on: ubuntu-20.04
    needs: Check
    if: needs.Check.outputs.IS_MERGED_COMMIT == 'true'
    steps:
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: 'Env'
        run: |
          echo RESOURCE_GROUP=`az functionapp list | jq -r '.[] | select(.name =="${{env.functionsApp}}") | .resourceGroup'` >> $GITHUB_ENV
      - name: Swap slot
        run: |
          az functionapp deployment slot swap -g $RESOURCE_GROUP -n ${{env.functionsApp}} -s ${{needs.Check.outputs.SLOT_NAME}}
      - name: Delete slot
        run: az functionapp deployment slot delete -g $RESOURCE_GROUP -n ${{env.functionsApp}} -s ${{needs.Check.outputs.SLOT_NAME}}

  Build_frontend:
    name: Build frontend using Vue.
    runs-on: ubuntu-latest
    needs: Check
    if: needs.Check.outputs.IS_MERGED_COMMIT == 'false'
    defaults:
      run:
        working-directory: Azure/Vue/weatherdisp
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Use Node.js ${{ env.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.node-version }}
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v1
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Install dependencies
      run: yarn --frozen-lockfile
    - name: Build
      run: yarn run build
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: vue
        path: Azure/Vue/weatherdisp/dist/index.html
  Build_runtime:
    name: Build functions.
    runs-on: ubuntu-latest
    needs: Check
    if: needs.Check.outputs.IS_MERGED_COMMIT == 'false'
    defaults:
      run:
        working-directory: Azure/Functions/WeatherDisp
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.dotnet }}
      - name: Create Dist
        run: mkdir -p dist
      - name: Build and publish
        run: dotnet publish *.csproj --output dist
      - name: Copy Image magick
        run: cp dist/bin/runtimes/linux-x64/native/Magick.Native-Q8-x64.dll.so dist/bin/Magick.Native-Q8-x64.dll.so
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: functions
          path: Azure/Functions/WeatherDisp/dist     
  Build_and_publish_image:
    name: Build and publish image.
    runs-on: ubuntu-latest
    needs: [Check, Prepare, Build_frontend, Build_runtime]
    if: needs.Check.outputs.IS_MERGED_COMMIT == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.registry }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Download frontend artifact
        uses: actions/download-artifact@v2
        with:
          name: vue
          path: images/artifacts/dist
      - name: Download runtime artifact
        uses: actions/download-artifact@v2
        with:
          name: functions
          path: images/artifacts
      - name: Prepare
        id: prep
        run: |
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: build image and push to GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          push: true
          context: images
          tags: |
            ${{ env.registry }}/${{ github.repository_owner }}/${{ env.image }}:latest
            ${{ env.registry }}/${{ github.repository_owner }}/${{ env.image }}:${{ steps.prep.outputs.version }}
            ${{ env.registry }}/${{ github.repository_owner }}/${{ env.image }}:${{needs.Prepare.outputs.BRANCH}}-latest
            ${{ env.registry }}/${{ github.repository_owner }}/${{ env.image }}:${{needs.Prepare.outputs.TAG_NAME}}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

  DeployPush:
    name: Deploy functions container from Push
    needs: [Check, Prepare, Build_and_publish_image]
    if: needs.Check.outputs.IS_MERGED_COMMIT == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: GitHub Container Registry login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.registry }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: 'Deploy container'
        uses: Azure/functions-container-action@v1
        with:
          app-name: ${{ env.functionsApp }}
          image: ${{ env.registry }}/${{ github.repository_owner }}/${{ env.image }}:${{needs.Prepare.outputs.TAG_NAME}}